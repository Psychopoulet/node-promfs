"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},fs=require(require("path").join(__dirname,"extends.js"));fs.mkdirProm=function(e){return new Promise(function(r,n){fs.isDirectoryProm(e).then(function(e){r(e)}).catch(function(e){n(e)})}).then(function(r){return r?Promise.resolve():new Promise(function(r,n){fs.mkdir(e,function(e){e?n(e):r()})})})},fs.rmdirProm=function(e){return new Promise(function(r,n){fs.isDirectoryProm(e).then(function(e){r(e)}).catch(function(e){n(e)})}).then(function(r){return r?new Promise(function(r,n){fs.rmdir(e,function(e){e?n(e):r()})}):Promise.resolve()})},fs.unlinkProm=function(e){return new Promise(function(r,n){fs.isFileProm(e).then(function(e){r(e)}).catch(function(e){n(e)})}).then(function(r){return r?new Promise(function(r,n){fs.unlink(e,function(e){e?n(e):r()})}):Promise.resolve()})},fs.openProm=function(e,r,n){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'path' argument")):"string"!=typeof e?Promise.reject(new TypeError("'path' argument is not a string")):"undefined"==typeof r?Promise.reject(new ReferenceError("missing 'flags' argument")):(e=e.trim(),""===e?Promise.reject(new Error("'path' argument is empty")):new Promise(function(t,o){fs.open(e,r,n?n:null,function(e,r){e?o(e):t(r)})}))},fs.closeProm=function(e){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'fd' argument")):"number"!=typeof e?Promise.reject(new TypeError("'fd' argument is not a number")):new Promise(function(r,n){fs.close(e,function(e){e?n(e):r()})})},fs.accessProm=function(e,r){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'path' argument")):"string"!=typeof e?Promise.reject(new TypeError("'path' argument is not a string")):(e=e.trim(),""===e?Promise.reject(new Error("'path' argument is empty")):new Promise(function(n,t){fs.access(e,r?r:null,function(e,r){e?t(e):n(r)})}))},fs.appendFileProm=function(e,r,n){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'file' argument")):"string"!=typeof e?Promise.reject(new TypeError("'file' argument is not a string")):"undefined"==typeof r?Promise.reject(new ReferenceError("missing 'data' argument")):"string"==typeof r||"object"===("undefined"==typeof r?"undefined":_typeof(r))&&r instanceof Buffer?(e=e.trim(),""===e?Promise.reject(new Error("'file' argument is empty")):new Promise(function(t,o){fs.appendFile(e,r,n?n:null,function(e){e?o(e):t()})})):Promise.reject(new TypeError("'data' argument is not a string or a Buffer"))},fs.chmodProm=function(e,r){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'path' argument")):"string"!=typeof e?Promise.reject(new TypeError("'path' argument is not a string")):"undefined"==typeof r?Promise.reject(new ReferenceError("missing 'mode' argument")):"number"!=typeof r?Promise.reject(new TypeError("'mode' argument is not a number")):(e=e.trim(),""===e?Promise.reject(new Error("'path' argument is empty")):void new Promise(function(n,t){fs.chmod(e,r,function(e){e?t(e):n()})}))},fs.chownProm=function(e,r,n){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'path' argument")):"string"!=typeof e?Promise.reject(new TypeError("'path' argument is not a string")):"undefined"==typeof r?Promise.reject(new ReferenceError("missing 'uid' argument")):"number"!=typeof r?Promise.reject(new TypeError("'uid' argument is not a number")):"undefined"==typeof n?Promise.reject(new ReferenceError("missing 'gid' argument")):"number"!=typeof n?Promise.reject(new TypeError("'gid' argument is not a number")):(e=e.trim(),""===e?Promise.reject(new Error("'path' argument is empty")):new Promise(function(t,o){fs.chown(e,r,n,function(e){e?o(e):t()})}))},fs.readdirProm=function(e){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'path' argument")):"string"!=typeof e?Promise.reject(new TypeError("'path' argument is not a string")):(e=e.trim(),""===e?Promise.reject(new Error("'path' argument is empty")):new Promise(function(r,n){fs.readdir(e,function(e,t){e?n(e):r(t)})}))},fs.readFileProm=function(e,r){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'file' argument")):"string"==typeof e||"number"==typeof e||"object"===("undefined"==typeof e?"undefined":_typeof(e))&&e instanceof Buffer?new Promise(function(n,t){fs.readFile(e,r?r:null,function(e,r){e?t(e):n(r)})}):Promise.reject(new TypeError("'file' argument is not a string, a number or a Buffer"))},fs.realpathProm=function(e,r){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'path' argument")):"string"!=typeof e?Promise.reject(new TypeError("'path' argument is not a string")):(e=e.trim(),""===e?Promise.reject(new Error("'path' argument is empty")):new Promise(function(n,t){fs.realpath(e,r?r:null,function(e,r){e?t(e):n(r)})}))},fs.renameProm=function(e,r){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'oldPath' argument")):"string"!=typeof e?Promise.reject(new TypeError("'oldPath' argument is not a string")):"undefined"==typeof r?Promise.reject(new ReferenceError("missing 'newPath' argument")):"string"!=typeof r?Promise.reject(new TypeError("'newPath' argument is not a string")):(e=e.trim(),r=r.trim(),""===e?Promise.reject(new Error("'oldPath' argument is empty")):""===r?Promise.reject(new Error("'newPath' argument is empty")):new Promise(function(n,t){fs.rename(e,r,function(e,r){e?t(e):n(r)})}))},fs.statProm=function(e){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'path' argument")):"string"!=typeof e?Promise.reject(new TypeError("'path' argument is not a string")):(e=e.trim(),""===e?Promise.reject(new Error("'path' argument is empty")):new Promise(function(r,n){fs.stat(e,function(e,t){e?n(e):r(t)})}))},fs.truncateProm=function(e,r){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'path' argument")):"string"!=typeof e?Promise.reject(new TypeError("'path' argument is not a string")):"undefined"==typeof r?Promise.reject(new ReferenceError("missing 'len' argument")):"number"!=typeof r?Promise.reject(new TypeError("'len' argument is not a number")):(e=e.trim(),""===e?Promise.reject(new Error("'path' argument is empty")):new Promise(function(n,t){fs.truncate(e,r,function(e,r){e?t(e):n(r)})}))},fs.writeFileProm=function(e,r,n){return"undefined"==typeof e?Promise.reject(new ReferenceError("missing 'file' argument")):"string"==typeof e||"number"==typeof e||"object"===("undefined"==typeof e?"undefined":_typeof(e))&&e instanceof Buffer?"undefined"==typeof r?Promise.reject(new ReferenceError("missing 'data' argument")):"string"==typeof r||"object"===("undefined"==typeof r?"undefined":_typeof(r))&&r instanceof Buffer?new Promise(function(t,o){fs.writeFile(e,r,n?n:null,function(e,r){e?o(e):t(r)})}):Promise.reject(new TypeError("'data' argument is not a string or a Buffer")):Promise.reject(new TypeError("'file' argument is not a string, a number or a Buffer"))},["directoryToString","directoryToFile","extractFiles","filesToString","filesToFile","mkdirp","rmdirp","fchmod","fchown","fdatasync","fstat","fsync","ftruncate","futimes","link","lstat","mkdtemp","utimes","write"].forEach(function(e){fs[e+"Prom"]=function(){for(var r=arguments.length,n=Array(r),t=0;t<r;t++)n[t]=arguments[t];return new Promise(function(r,t){fs[e].apply(fs,n.concat([function(){for(var e=arguments.length,n=Array(e),o=0;o<e;o++)n[o]=arguments[o];var i=n.shift();i?t(i):r.apply(void 0,n)}]))})}}),module.exports=fs;